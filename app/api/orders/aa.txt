export const POST = async (req) => {
  connectDB();
  const products = await Product.find().lean();

  const body = await req.json();
  const { cart, address } = body;

  for (const item of cart.items) {
    // console.log(item.id);

    const id = item.id.slice(0, -item.size.length);
    // console.log(id);
    // console.log(item.size.length);

    const currentProduct = products.find((pro) => pro._id == id);

    // console.log(currentProduct);

    const stock = currentProduct.stock.find(
      (stock) => stock.optionName === item.size
    );

    if (stock.availabe < item.quantity) {
      return NextResponse.json({ error: "Out of stock" }, { status: 500 });
    }
  }

  try {
    const order = new Order({
      ...body,

      cart: {
        items: JSON.stringify(cart.items),
        totalAmount: cart.totalAmount,
        totalQuantity: cart.totalQuantity,
      },
    });

    // for (const item of cart.items) {
    //   const id = item.id.slice(0, -item.size.length);

    //   await Product.findOneAndUpdate(
    //     { _id: id },
    //     { $inc: { [`stock.${item.size}`]: -item.quantity } }
    //   );
    // }
    const createdOrder = await order.save();

    // const session = await getServerSession();

    // // if (session) {
    // //   console.log(body.userId);
    // //   const user = await User.findById(body.userId);

    // //   user.orders.push(createdOrder._id);

    // //   await user.save();
    // // }

    // /////// if not logged in create new user //////////
    // if (!session) {
    //   const user = await User.find({ email: address.email });
    //   console.log(user);

    //   if (user.length == 0) {
    //     const user = new User({
    //       name: address.name,
    //       email: address.email,
    //       image:
    //         "https://lh3.googleusercontent.com/a/ACg8ocIDR7IJD68vX2tdzW1DLjuXQ_-Z7KBA0zrny0Z8oayJ=s96-c",
    //     });

    //     const createdUser = await user.save();
    //   }
    // }
    // const data = {
    //   name: "omar",
    //   email: "ohh@gmail.com",
    //   subject: "New Order!",
    //   message: "sss",
    // };
    // const CONTACT_MESSAGE_FIELDS = {
    //   name: "Name",
    //   email: "Email",
    //   subject: "Subject",
    //   message: "Message",
    // };

    // const generateEmailContent = (data) => {
    //   const stringData = Object.entries(data).reduce(
    //     (str, [key, val]) =>
    //       (str += `${CONTACT_MESSAGE_FIELDS[key]}: \n${val} \n \n`),
    //     ""
    //   );
    //   const htmlData = Object.entries(data).reduce((str, [key, val]) => {
    //     return (str += `<h3 class="form-heading" align="left">${CONTACT_MESSAGE_FIELDS[key]}</h3><p class="form-answer" align="left">${val}</p>`);
    //   }, "");

    //   return {
    //     text: stringData,
    //     html: `<!DOCTYPE html><html> <head> <title></title> <meta charset="utf-8"/> <meta name="viewport" content="width=device-width, initial-scale=1"/> <meta http-equiv="X-UA-Compatible" content="IE=edge"/> <style type="text/css"> body, table, td, a{-webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%;}table{border-collapse: collapse !important;}body{height: 100% !important; margin: 0 !important; padding: 0 !important; width: 100% !important;}@media screen and (max-width: 525px){.wrapper{width: 100% !important; max-width: 100% !important;}.responsive-table{width: 100% !important;}.padding{padding: 10px 5% 15px 5% !important;}.section-padding{padding: 0 15px 50px 15px !important;}}.form-container{margin-bottom: 24px; padding: 20px; border: 1px dashed #ccc;}.form-heading{color: #2a2a2a; font-family: "Helvetica Neue", "Helvetica", "Arial", sans-serif; font-weight: 400; text-align: left; line-height: 20px; font-size: 18px; margin: 0 0 8px; padding: 0;}.form-answer{color: #2a2a2a; font-family: "Helvetica Neue", "Helvetica", "Arial", sans-serif; font-weight: 300; text-align: left; line-height: 20px; font-size: 16px; margin: 0 0 24px; padding: 0;}div[style*="margin: 16px 0;"]{margin: 0 !important;}</style> </head> <body style="margin: 0 !important; padding: 0 !important; background: #fff"> <div style=" display: none; font-size: 1px; color: #fefefe; line-height: 1px;  max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden; " ></div><table border="0" cellpadding="0" cellspacing="0" width="100%"> <tr> <td bgcolor="#ffffff" align="center" style="padding: 10px 15px 30px 15px" class="section-padding" > <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 500px" class="responsive-table" > <tr> <td> <table width="100%" border="0" cellspacing="0" cellpadding="0"> <tr> <td> <table width="100%" border="0" cellspacing="0" cellpadding="0" > <tr> <td style=" padding: 0 0 0 0; font-size: 16px; line-height: 25px; color: #232323; " class="padding message-content" > <h2>New Contact Message</h2> <div class="form-container">${htmlData}</div></td></tr></table> </td></tr></table> </td></tr></table> </td></tr></table> </body></html>`,
    //   };
    // };

    // await transporter.sendMail({
    //   ...mailOptions,
    //   ...generateEmailContent(data),
    //   subject: data.subject,
    // });
    return NextResponse.json({ message: "orderedd ya negm" });
  } catch (error) {
    console.log(error);
    return NextResponse.json({ message: error });
  }
};